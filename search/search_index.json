{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi Execution Unique The siddhi-execution-unique extension is a Siddhi extension that retains and process unique events based on the given parameters. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 5.0.4 . Features deduplicate ( Stream Processor ) Removes duplicate events based on the unique.key parameter that arrive within the time.interval gap from one another. ever ( Window ) Window that retains the latest events based on a given unique keys. When a new event arrives with the same key it replaces the one that exist in the window. b This function is not recommended to be used when the maximum number of unique attributes are undefined, as there is a risk of system going out to memory /b . externalTimeBatch ( Window ) This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. first ( Window ) This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. firstLengthBatch ( Window ) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. firstTimeBatch ( Window ) A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. length ( Window ) This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. lengthBatch ( Window ) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. time ( Window ) This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. timeBatch ( Window ) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. timeLengthBatch ( Window ) This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-execution-unique","text":"The siddhi-execution-unique extension is a Siddhi extension that retains and process unique events based on the given parameters. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi Execution Unique"},{"location":"#download","text":"Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 5.0.4 .","title":"Latest API Docs"},{"location":"#features","text":"deduplicate ( Stream Processor ) Removes duplicate events based on the unique.key parameter that arrive within the time.interval gap from one another. ever ( Window ) Window that retains the latest events based on a given unique keys. When a new event arrives with the same key it replaces the one that exist in the window. b This function is not recommended to be used when the maximum number of unique attributes are undefined, as there is a risk of system going out to memory /b . externalTimeBatch ( Window ) This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. first ( Window ) This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. firstLengthBatch ( Window ) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. firstTimeBatch ( Window ) A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. length ( Window ) This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. lengthBatch ( Window ) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. time ( Window ) This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. timeBatch ( Window ) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. timeLengthBatch ( Window ) This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/4.0.10/","text":"API Docs Unique first ( Window ) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. time ( Window ) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch ( Window ) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. externalTimeBatch ( Window ) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. firstTimeBatch ( Window ) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length ( Window ) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch ( Window ) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. firstLengthBatch ( Window ) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. ever ( Window ) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"4.0.10"},{"location":"api/4.0.10/#api-docs","text":"","title":"API Docs"},{"location":"api/4.0.10/#unique","text":"","title":"Unique"},{"location":"api/4.0.10/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window"},{"location":"api/4.0.10/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window"},{"location":"api/4.0.10/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window"},{"location":"api/4.0.10/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window"},{"location":"api/4.0.10/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window"},{"location":"api/4.0.10/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window"},{"location":"api/4.0.10/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window"},{"location":"api/4.0.10/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window"},{"location":"api/4.0.10/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window"},{"location":"api/4.0.12/","text":"API Docs - v4.0.12 Unique firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"4.0.12"},{"location":"api/4.0.12/#api-docs-v4012","text":"","title":"API Docs - v4.0.12"},{"location":"api/4.0.12/#unique","text":"","title":"Unique"},{"location":"api/4.0.12/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.12/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.12/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.12/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.12/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.12/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.12/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.12/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.12/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.13/","text":"API Docs - v4.0.13 Unique externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"4.0.13"},{"location":"api/4.0.13/#api-docs-v4013","text":"","title":"API Docs - v4.0.13"},{"location":"api/4.0.13/#unique","text":"","title":"Unique"},{"location":"api/4.0.13/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.13/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.13/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.13/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.13/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.13/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.13/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.13/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.13/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.14/","text":"API Docs - v4.0.14 Unique time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"4.0.14"},{"location":"api/4.0.14/#api-docs-v4014","text":"","title":"API Docs - v4.0.14"},{"location":"api/4.0.14/#unique","text":"","title":"Unique"},{"location":"api/4.0.14/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.14/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.14/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.14/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.14/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.14/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.14/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.14/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.14/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.15/","text":"API Docs - v4.0.15 Unique firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"4.0.15"},{"location":"api/4.0.15/#api-docs-v4015","text":"","title":"API Docs - v4.0.15"},{"location":"api/4.0.15/#unique","text":"","title":"Unique"},{"location":"api/4.0.15/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.15/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.15/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.15/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.15/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.15/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.15/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.15/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.15/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.16/","text":"API Docs - v4.0.16 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"4.0.16"},{"location":"api/4.0.16/#api-docs-v4016","text":"","title":"API Docs - v4.0.16"},{"location":"api/4.0.16/#unique","text":"","title":"Unique"},{"location":"api/4.0.16/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.16/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.16/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.16/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.16/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.16/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.16/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.16/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.16/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.17/","text":"API Docs - v4.0.17 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"4.0.17"},{"location":"api/4.0.17/#api-docs-v4017","text":"","title":"API Docs - v4.0.17"},{"location":"api/4.0.17/#unique","text":"","title":"Unique"},{"location":"api/4.0.17/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.17/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.17/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.17/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.17/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.17/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.17/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.17/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.17/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.18/","text":"API Docs - v4.0.18 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"4.0.18"},{"location":"api/4.0.18/#api-docs-v4018","text":"","title":"API Docs - v4.0.18"},{"location":"api/4.0.18/#unique","text":"","title":"Unique"},{"location":"api/4.0.18/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.18/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.18/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.18/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.18/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.18/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.18/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.18/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.18/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.19/","text":"API Docs - v4.0.19 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"4.0.19"},{"location":"api/4.0.19/#api-docs-v4019","text":"","title":"API Docs - v4.0.19"},{"location":"api/4.0.19/#unique","text":"","title":"Unique"},{"location":"api/4.0.19/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.19/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.19/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.19/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.19/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.19/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.19/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.19/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.19/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.20/","text":"API Docs - v4.0.20 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"4.0.20"},{"location":"api/4.0.20/#api-docs-v4020","text":"","title":"API Docs - v4.0.20"},{"location":"api/4.0.20/#unique","text":"","title":"Unique"},{"location":"api/4.0.20/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.20/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.20/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.20/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.20/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.20/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.20/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.20/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.20/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.21/","text":"API Docs - v4.0.21 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"4.0.21"},{"location":"api/4.0.21/#api-docs-v4021","text":"","title":"API Docs - v4.0.21"},{"location":"api/4.0.21/#unique","text":"","title":"Unique"},{"location":"api/4.0.21/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.21/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.21/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.21/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.21/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.21/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.21/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.21/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.21/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.22/","text":"API Docs - v4.0.22 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the timestamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. timeLengthBatch (Window) This is a batch (tumbling) time length window that is updated with the latest events based on a unique key parameter. The window will tumble upon elapse of the time window or when length number of unique events have arrived. If a new event that arrives within the window period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"4.0.22"},{"location":"api/4.0.22/#api-docs-v4022","text":"","title":"API Docs - v4.0.22"},{"location":"api/4.0.22/#unique","text":"","title":"Unique"},{"location":"api/4.0.22/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.22/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the timestamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.22/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.22/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.22/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.22/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.22/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.22/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.22/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.22/#timelengthbatch-window","text":"This is a batch (tumbling) time length window that is updated with the latest events based on a unique key parameter. The window will tumble upon elapse of the time window or when length number of unique events have arrived. If a new event that arrives within the window period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeLengthBatch (Window)"},{"location":"api/4.0.23/","text":"API Docs - v4.0.23 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the timestamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. timeLengthBatch (Window) This is a batch (tumbling) time length window that is updated with the latest events based on a unique key parameter. The window will tumble upon elapse of the time window or when length number of unique events have arrived. If a new event that arrives within the window period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"4.0.23"},{"location":"api/4.0.23/#api-docs-v4023","text":"","title":"API Docs - v4.0.23"},{"location":"api/4.0.23/#unique","text":"","title":"Unique"},{"location":"api/4.0.23/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.23/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the timestamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.23/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.23/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.23/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.23/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.23/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.23/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.23/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.23/#timelengthbatch-window","text":"This is a batch (tumbling) time length window that is updated with the latest events based on a unique key parameter. The window will tumble upon elapse of the time window or when length number of unique events have arrived. If a new event that arrives within the window period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeLengthBatch (Window)"},{"location":"api/4.0.24/","text":"API Docs - v4.0.24 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the timestamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. timeLengthBatch (Window) This is a batch (tumbling) time length window that is updated with the latest events based on a unique key parameter. The window will tumble upon elapse of the time window or when length number of unique events have arrived. If a new event that arrives within the window period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"4.0.24"},{"location":"api/4.0.24/#api-docs-v4024","text":"","title":"API Docs - v4.0.24"},{"location":"api/4.0.24/#unique","text":"","title":"Unique"},{"location":"api/4.0.24/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.24/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the timestamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.24/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.24/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.24/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.24/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.24/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.24/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.24/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.24/#timelengthbatch-window","text":"This is a batch (tumbling) time length window that is updated with the latest events based on a unique key parameter. The window will tumble upon elapse of the time window or when length number of unique events have arrived. If a new event that arrives within the window period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeLengthBatch (Window)"},{"location":"api/4.0.25/","text":"API Docs - v4.0.25 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the timestamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. timeLengthBatch (Window) This is a batch (tumbling) time length window that is updated with the latest events based on a unique key parameter. The window will tumble upon elapse of the time window or when length number of unique events have arrived. If a new event that arrives within the window period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"4.0.25"},{"location":"api/4.0.25/#api-docs-v4025","text":"","title":"API Docs - v4.0.25"},{"location":"api/4.0.25/#unique","text":"","title":"Unique"},{"location":"api/4.0.25/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.25/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the timestamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.25/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.25/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.25/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.25/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.25/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.25/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.25/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.25/#timelengthbatch-window","text":"This is a batch (tumbling) time length window that is updated with the latest events based on a unique key parameter. The window will tumble upon elapse of the time window or when length number of unique events have arrived. If a new event that arrives within the window period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeLengthBatch (Window)"},{"location":"api/4.0.26/","text":"API Docs - v4.0.26 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the timestamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. timeLengthBatch (Window) This is a batch (tumbling) time length window that is updated with the latest events based on a unique key parameter. The window will tumble upon elapse of the time window or when length number of unique events have arrived. If a new event that arrives within the window period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"4.0.26"},{"location":"api/4.0.26/#api-docs-v4026","text":"","title":"API Docs - v4.0.26"},{"location":"api/4.0.26/#unique","text":"","title":"Unique"},{"location":"api/4.0.26/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.26/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the timestamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.26/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.26/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.26/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.26/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.26/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.26/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.26/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.26/#timelengthbatch-window","text":"This is a batch (tumbling) time length window that is updated with the latest events based on a unique key parameter. The window will tumble upon elapse of the time window or when length number of unique events have arrived. If a new event that arrives within the window period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeLengthBatch (Window)"},{"location":"api/4.0.27/","text":"API Docs - v4.0.27 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the timestamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. firstTimeBatch (Window) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream length (Window) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. timeLengthBatch (Window) This is a batch (tumbling) time length window that is updated with the latest events based on a unique key parameter. The window will tumble upon elapse of the time window or when length number of unique events have arrived. If a new event that arrives within the window period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"4.0.27"},{"location":"api/4.0.27/#api-docs-v4027","text":"","title":"API Docs - v4.0.27"},{"location":"api/4.0.27/#unique","text":"","title":"Unique"},{"location":"api/4.0.27/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window)"},{"location":"api/4.0.27/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the timestamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.27/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window)"},{"location":"api/4.0.27/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.27/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window)"},{"location":"api/4.0.27/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window)"},{"location":"api/4.0.27/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.27/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.27/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.27/#timelengthbatch-window","text":"This is a batch (tumbling) time length window that is updated with the latest events based on a unique key parameter. The window will tumble upon elapse of the time window or when length number of unique events have arrived. If a new event that arrives within the window period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeLengthBatch (Window)"},{"location":"api/4.0.28/","text":"API Docs - v4.0.28 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event arrives with the same value for the unique key parameter as the existing event, the existing event expires, and is replaced with the latest one. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, we can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute. firstTimeBatch (Window) A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'. length (Window) This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute. timeLengthBatch (Window) This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold the events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"4.0.28"},{"location":"api/4.0.28/#api-docs-v4028","text":"","title":"API Docs - v4.0.28"},{"location":"api/4.0.28/#unique","text":"","title":"Unique"},{"location":"api/4.0.28/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event arrives with the same value for the unique key parameter as the existing event, the existing event expires, and is replaced with the latest one. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, we can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream.","title":"ever (Window)"},{"location":"api/4.0.28/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.0.28/#first-window","text":"This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute.","title":"first (Window)"},{"location":"api/4.0.28/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.0.28/#firsttimebatch-window","text":"A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'.","title":"firstTimeBatch (Window)"},{"location":"api/4.0.28/#length-window","text":"This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window.","title":"length (Window)"},{"location":"api/4.0.28/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream.","title":"lengthBatch (Window)"},{"location":"api/4.0.28/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.0.28/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeBatch (Window)"},{"location":"api/4.0.28/#timelengthbatch-window","text":"This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold the events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeLengthBatch (Window)"},{"location":"api/4.0.7/","text":"API Docs Unique lengthBatch ( Window ) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. length ( Window ) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. first ( Window ) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. externalTimeBatch ( Window ) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. firstLengthBatch ( Window ) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. timeBatch ( Window ) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. ever ( Window ) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. time ( Window ) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. firstTimeBatch ( Window ) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"4.0.7"},{"location":"api/4.0.7/#api-docs","text":"","title":"API Docs"},{"location":"api/4.0.7/#unique","text":"","title":"Unique"},{"location":"api/4.0.7/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window"},{"location":"api/4.0.7/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window"},{"location":"api/4.0.7/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window"},{"location":"api/4.0.7/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window"},{"location":"api/4.0.7/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window"},{"location":"api/4.0.7/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window"},{"location":"api/4.0.7/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window"},{"location":"api/4.0.7/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window"},{"location":"api/4.0.7/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window"},{"location":"api/4.0.8/","text":"API Docs Unique lengthBatch ( Window ) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. length ( Window ) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. first ( Window ) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. externalTimeBatch ( Window ) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. firstLengthBatch ( Window ) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. timeBatch ( Window ) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. ever ( Window ) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. time ( Window ) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. firstTimeBatch ( Window ) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"4.0.8"},{"location":"api/4.0.8/#api-docs","text":"","title":"API Docs"},{"location":"api/4.0.8/#unique","text":"","title":"Unique"},{"location":"api/4.0.8/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window"},{"location":"api/4.0.8/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window"},{"location":"api/4.0.8/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window"},{"location":"api/4.0.8/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window"},{"location":"api/4.0.8/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window"},{"location":"api/4.0.8/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window"},{"location":"api/4.0.8/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window"},{"location":"api/4.0.8/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window"},{"location":"api/4.0.8/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window"},{"location":"api/4.0.9/","text":"API Docs Unique lengthBatch ( Window ) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream. length ( Window ) This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window. first ( Window ) This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute. externalTimeBatch ( Window ) This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. firstLengthBatch ( Window ) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute. timeBatch ( Window ) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute. ever ( Window ) This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream. time ( Window ) This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. firstTimeBatch ( Window ) A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"4.0.9"},{"location":"api/4.0.9/#api-docs","text":"","title":"API Docs"},{"location":"api/4.0.9/#unique","text":"","title":"Unique"},{"location":"api/4.0.9/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.","title":"lengthBatch (Window"},{"location":"api/4.0.9/#length-window","text":"This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.","title":"length (Window"},{"location":"api/4.0.9/#first-window","text":"This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.","title":"first (Window"},{"location":"api/4.0.9/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT Yes No time.out Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. 0 INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. 0 INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window"},{"location":"api/4.0.9/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.","title":"firstLengthBatch (Window"},{"location":"api/4.0.9/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.","title":"timeBatch (Window"},{"location":"api/4.0.9/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the uniqueIps output stream.","title":"ever (Window"},{"location":"api/4.0.9/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window"},{"location":"api/4.0.9/#firsttimebatch-window","text":"A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. 0 INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream","title":"firstTimeBatch (Window"},{"location":"api/4.1.0/","text":"API Docs - v4.1.0 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event arrives with the same value for the unique key parameter as the existing event, the existing event expires, and is replaced with the latest one. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, we can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute. firstTimeBatch (Window) A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'. length (Window) This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute. timeLengthBatch (Window) This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold the events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"4.1.0"},{"location":"api/4.1.0/#api-docs-v410","text":"","title":"API Docs - v4.1.0"},{"location":"api/4.1.0/#unique","text":"","title":"Unique"},{"location":"api/4.1.0/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event arrives with the same value for the unique key parameter as the existing event, the existing event expires, and is replaced with the latest one. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, we can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream.","title":"ever (Window)"},{"location":"api/4.1.0/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.1.0/#first-window","text":"This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute.","title":"first (Window)"},{"location":"api/4.1.0/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.1.0/#firsttimebatch-window","text":"A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'.","title":"firstTimeBatch (Window)"},{"location":"api/4.1.0/#length-window","text":"This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window.","title":"length (Window)"},{"location":"api/4.1.0/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream.","title":"lengthBatch (Window)"},{"location":"api/4.1.0/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.1.0/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeBatch (Window)"},{"location":"api/4.1.0/#timelengthbatch-window","text":"This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold the events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeLengthBatch (Window)"},{"location":"api/4.1.1/","text":"API Docs - v4.1.1 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event arrives with the same value for the unique key parameter as the existing event, the existing event expires, and is replaced with the latest one. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, we can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute. firstTimeBatch (Window) A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'. length (Window) This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute. timeLengthBatch (Window) This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold the events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"4.1.1"},{"location":"api/4.1.1/#api-docs-v411","text":"","title":"API Docs - v4.1.1"},{"location":"api/4.1.1/#unique","text":"","title":"Unique"},{"location":"api/4.1.1/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event arrives with the same value for the unique key parameter as the existing event, the existing event expires, and is replaced with the latest one. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, we can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream.","title":"ever (Window)"},{"location":"api/4.1.1/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.1.1/#first-window","text":"This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute.","title":"first (Window)"},{"location":"api/4.1.1/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.1.1/#firsttimebatch-window","text":"A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'.","title":"firstTimeBatch (Window)"},{"location":"api/4.1.1/#length-window","text":"This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window.","title":"length (Window)"},{"location":"api/4.1.1/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream.","title":"lengthBatch (Window)"},{"location":"api/4.1.1/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.1.1/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeBatch (Window)"},{"location":"api/4.1.1/#timelengthbatch-window","text":"This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold the events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeLengthBatch (Window)"},{"location":"api/4.1.2/","text":"API Docs - v4.1.2 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event arrives with the same value for the unique key parameter as the existing event, the existing event expires, and is replaced with the latest one. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, we can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute. firstTimeBatch (Window) A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'. length (Window) This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute. timeLengthBatch (Window) This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold the events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"4.1.2"},{"location":"api/4.1.2/#api-docs-v412","text":"","title":"API Docs - v4.1.2"},{"location":"api/4.1.2/#unique","text":"","title":"Unique"},{"location":"api/4.1.2/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event arrives with the same value for the unique key parameter as the existing event, the existing event expires, and is replaced with the latest one. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, we can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream.","title":"ever (Window)"},{"location":"api/4.1.2/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/4.1.2/#first-window","text":"This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute.","title":"first (Window)"},{"location":"api/4.1.2/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute.","title":"firstLengthBatch (Window)"},{"location":"api/4.1.2/#firsttimebatch-window","text":"A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'.","title":"firstTimeBatch (Window)"},{"location":"api/4.1.2/#length-window","text":"This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window.","title":"length (Window)"},{"location":"api/4.1.2/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream.","title":"lengthBatch (Window)"},{"location":"api/4.1.2/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/4.1.2/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeBatch (Window)"},{"location":"api/4.1.2/#timelengthbatch-window","text":"This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold the events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeLengthBatch (Window)"},{"location":"api/5.0.0/","text":"API Docs - v5.0.0 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event arrives with the same value for the unique key parameter as the existing event, the existing event expires, and is replaced with the latest one. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, we can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute. firstTimeBatch (Window) A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'. length (Window) This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute. timeLengthBatch (Window) This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold the events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"5.0.0"},{"location":"api/5.0.0/#api-docs-v500","text":"","title":"API Docs - v5.0.0"},{"location":"api/5.0.0/#unique","text":"","title":"Unique"},{"location":"api/5.0.0/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event arrives with the same value for the unique key parameter as the existing event, the existing event expires, and is replaced with the latest one. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, we can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream.","title":"ever (Window)"},{"location":"api/5.0.0/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/5.0.0/#first-window","text":"This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute.","title":"first (Window)"},{"location":"api/5.0.0/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute.","title":"firstLengthBatch (Window)"},{"location":"api/5.0.0/#firsttimebatch-window","text":"A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'.","title":"firstTimeBatch (Window)"},{"location":"api/5.0.0/#length-window","text":"This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window.","title":"length (Window)"},{"location":"api/5.0.0/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream.","title":"lengthBatch (Window)"},{"location":"api/5.0.0/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/5.0.0/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeBatch (Window)"},{"location":"api/5.0.0/#timelengthbatch-window","text":"This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold the events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeLengthBatch (Window)"},{"location":"api/5.0.1/","text":"API Docs - v5.0.1 Unique ever (Window) This is a window that is updated with the latest events based on a unique key parameter. When a new event arrives with the same value for the unique key parameter as the existing event, the existing event expires, and is replaced with the latest one. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, we can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute. firstTimeBatch (Window) A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'. length (Window) This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute. timeLengthBatch (Window) This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold the events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"5.0.1"},{"location":"api/5.0.1/#api-docs-v501","text":"","title":"API Docs - v5.0.1"},{"location":"api/5.0.1/#unique","text":"","title":"Unique"},{"location":"api/5.0.1/#ever-window","text":"This is a window that is updated with the latest events based on a unique key parameter. When a new event arrives with the same value for the unique key parameter as the existing event, the existing event expires, and is replaced with the latest one. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness.If multiple attributes need to be checked, we can specify them as a comma-separated list. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string) ; from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps ; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string) ; from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps ; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream.","title":"ever (Window)"},{"location":"api/5.0.1/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string) ; from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/5.0.1/#first-window","text":"This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE unique.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE No No Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute.","title":"first (Window)"},{"location":"api/5.0.1/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute.","title":"firstLengthBatch (Window)"},{"location":"api/5.0.1/#firsttimebatch-window","text":"A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'.","title":"firstTimeBatch (Window)"},{"location":"api/5.0.1/#length-window","text":"This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream ; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window.","title":"length (Window)"},{"location":"api/5.0.1/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream.","title":"lengthBatch (Window)"},{"location":"api/5.0.1/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/5.0.1/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The tumbling time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeBatch (Window)"},{"location":"api/5.0.1/#timelengthbatch-window","text":"This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE No No window.time The sliding time period for which the window should hold the events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No window.length The number of events the window should tumble. INT No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeLengthBatch (Window)"},{"location":"api/5.0.2/","text":"API Docs - v5.0.2 Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions. Unique ever (Window) Window that retains the latest events based on a given unique key. When a new event arrives with the same key it replaces the one exist in the window. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute used to checked for uniqueness. If multiple attributes need to be checked, they can be specified as a comma-separated list. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string); from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string); from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute. firstTimeBatch (Window) A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'. length (Window) This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events that should be included in a sliding length window. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The tumbling time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute. timeLengthBatch (Window) This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT window.length) unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold the events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"5.0.2"},{"location":"api/5.0.2/#api-docs-v502","text":"Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.2"},{"location":"api/5.0.2/#unique","text":"","title":"Unique"},{"location":"api/5.0.2/#ever-window","text":"Window that retains the latest events based on a given unique key. When a new event arrives with the same key it replaces the one exist in the window. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute used to checked for uniqueness. If multiple attributes need to be checked, they can be specified as a comma-separated list. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string); from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream.","title":"ever (Window)"},{"location":"api/5.0.2/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string); from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/5.0.2/#first-window","text":"This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute.","title":"first (Window)"},{"location":"api/5.0.2/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute.","title":"firstLengthBatch (Window)"},{"location":"api/5.0.2/#firsttimebatch-window","text":"A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'.","title":"firstTimeBatch (Window)"},{"location":"api/5.0.2/#length-window","text":"This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events that should be included in a sliding length window. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window.","title":"length (Window)"},{"location":"api/5.0.2/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream.","title":"lengthBatch (Window)"},{"location":"api/5.0.2/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/5.0.2/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The tumbling time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeBatch (Window)"},{"location":"api/5.0.2/#timelengthbatch-window","text":"This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT window.length) unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold the events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeLengthBatch (Window)"},{"location":"api/5.0.3/","text":"API Docs - v5.0.3 Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions. Unique ever (Window) Window that retains the latest events based on a given unique key. When a new event arrives with the same key it replaces the one exist in the window. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute used to checked for uniqueness. If multiple attributes need to be checked, they can be specified as a comma-separated list. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string); from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string); from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute. firstTimeBatch (Window) A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'. length (Window) This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events that should be included in a sliding length window. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The tumbling time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute. timeLengthBatch (Window) This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT window.length) unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold the events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"5.0.3"},{"location":"api/5.0.3/#api-docs-v503","text":"Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.3"},{"location":"api/5.0.3/#unique","text":"","title":"Unique"},{"location":"api/5.0.3/#ever-window","text":"Window that retains the latest events based on a given unique key. When a new event arrives with the same key it replaces the one exist in the window. Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute used to checked for uniqueness. If multiple attributes need to be checked, they can be specified as a comma-separated list. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount, ip insert all events into UniqueIps; The above query determines the latest events that have arrived from the 'LoginEvents' stream, based on the 'ip' attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the 'UniqueIps' output stream with 'ip' and 'ipCount' attributes. EXAMPLE 2 define stream LoginEvents (timeStamp long, ip string , id string); from LoginEvents#window.unique:ever(ip, id) select count(ip) as ipCount, ip , id insert expired events into UniqueIps; This query determines the latest events to be included in the window based on the ip and id attributes. When the 'LoginEvents' event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events which have been expired as a result of being replaced by a newer event are directed to the 'uniqueIps' output stream.","title":"ever (Window)"},{"location":"api/5.0.3/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string); from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/5.0.3/#first-window","text":"This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute.","title":"first (Window)"},{"location":"api/5.0.3/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute.","title":"firstLengthBatch (Window)"},{"location":"api/5.0.3/#firsttimebatch-window","text":"A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'.","title":"firstTimeBatch (Window)"},{"location":"api/5.0.3/#length-window","text":"This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events that should be included in a sliding length window. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window.","title":"length (Window)"},{"location":"api/5.0.3/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream.","title":"lengthBatch (Window)"},{"location":"api/5.0.3/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/5.0.3/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The tumbling time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeBatch (Window)"},{"location":"api/5.0.3/#timelengthbatch-window","text":"This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT window.length) unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold the events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeLengthBatch (Window)"},{"location":"api/5.0.4/","text":"API Docs - v5.0.4 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Unique deduplicate (Stream Processor) Removes duplicate events based on the unique.key parameter that arrive within the time.interval gap from one another. Syntax unique:deduplicate( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG time.interval) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key Parameter to uniquely identify events. INT LONG FLOAT BOOL DOUBLE STRING No Yes time.interval The sliding time period within which the duplicate events are dropped. INT LONG No No Examples EXAMPLE 1 define stream TemperatureStream (sensorId string, temperature double) from TemperatureStream#unique:deduplicate(sensorId, 30 sec) select * insert into UniqueTemperatureStream; Query that removes duplicate events of TemperatureStream stream based on sensorId attribute when they arrive within 30 seconds. ever (Window) Window that retains the latest events based on a given unique keys. When a new event arrives with the same key it replaces the one that exist in the window. b This function is not recommended to be used when the maximum number of unique attributes are undefined, as there is a risk of system going out to memory /b . Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute used to checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string); from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount insert events into UniqueIps; Query collects all unique events based on the ip attribute by retaining the latest unique events from the LoginEvents stream. Then the query counts the unique ip s arrived so far and outputs the ipCount via the UniqueIps stream. EXAMPLE 2 define stream DriverChangeStream (trainID string, driver string); from DriverChangeStream#window.unique:ever(trainID) select trainID, driver insert expired events into PreviousDriverChangeStream; Query collects all unique events based on the trainID attribute by retaining the latest unique events from the DriverChangeStream stream. The query outputs the previous unique event stored in the window as the expired events are emitted via PreviousDriverChangeStream stream. EXAMPLE 3 define stream StockStream (symbol string, price float); define stream PriceRequestStream(symbol string); from StockStream#window.unique:ever(symbol) as s join PriceRequestStream as p on s.symbol == p.symbol select s.symbol as symbol, s.price as price insert events into PriceResponseStream; Query stores the last unique event for each symbol attribute of StockStream stream, and joins them with events arriving on the PriceRequestStream for equal symbol attributes to fetch the latest price for each requested symbol and output via PriceResponseStream stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string); from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute. firstTimeBatch (Window) A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'. length (Window) This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events that should be included in a sliding length window. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The tumbling time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute. timeLengthBatch (Window) This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT window.length) unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold the events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"5.0.4"},{"location":"api/5.0.4/#api-docs-v504","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.4"},{"location":"api/5.0.4/#unique","text":"","title":"Unique"},{"location":"api/5.0.4/#deduplicate-stream-processor","text":"Removes duplicate events based on the unique.key parameter that arrive within the time.interval gap from one another. Syntax unique:deduplicate( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG time.interval) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key Parameter to uniquely identify events. INT LONG FLOAT BOOL DOUBLE STRING No Yes time.interval The sliding time period within which the duplicate events are dropped. INT LONG No No Examples EXAMPLE 1 define stream TemperatureStream (sensorId string, temperature double) from TemperatureStream#unique:deduplicate(sensorId, 30 sec) select * insert into UniqueTemperatureStream; Query that removes duplicate events of TemperatureStream stream based on sensorId attribute when they arrive within 30 seconds.","title":"deduplicate (Stream Processor)"},{"location":"api/5.0.4/#ever-window","text":"Window that retains the latest events based on a given unique keys. When a new event arrives with the same key it replaces the one that exist in the window. b This function is not recommended to be used when the maximum number of unique attributes are undefined, as there is a risk of system going out to memory /b . Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute used to checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string); from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount insert events into UniqueIps; Query collects all unique events based on the ip attribute by retaining the latest unique events from the LoginEvents stream. Then the query counts the unique ip s arrived so far and outputs the ipCount via the UniqueIps stream. EXAMPLE 2 define stream DriverChangeStream (trainID string, driver string); from DriverChangeStream#window.unique:ever(trainID) select trainID, driver insert expired events into PreviousDriverChangeStream; Query collects all unique events based on the trainID attribute by retaining the latest unique events from the DriverChangeStream stream. The query outputs the previous unique event stored in the window as the expired events are emitted via PreviousDriverChangeStream stream. EXAMPLE 3 define stream StockStream (symbol string, price float); define stream PriceRequestStream(symbol string); from StockStream#window.unique:ever(symbol) as s join PriceRequestStream as p on s.symbol == p.symbol select s.symbol as symbol, s.price as price insert events into PriceResponseStream; Query stores the last unique event for each symbol attribute of StockStream stream, and joins them with events arriving on the PriceRequestStream for equal symbol attributes to fetch the latest price for each requested symbol and output via PriceResponseStream stream.","title":"ever (Window)"},{"location":"api/5.0.4/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string); from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/5.0.4/#first-window","text":"This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute.","title":"first (Window)"},{"location":"api/5.0.4/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute.","title":"firstLengthBatch (Window)"},{"location":"api/5.0.4/#firsttimebatch-window","text":"A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'.","title":"firstTimeBatch (Window)"},{"location":"api/5.0.4/#length-window","text":"This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events that should be included in a sliding length window. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window.","title":"length (Window)"},{"location":"api/5.0.4/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream.","title":"lengthBatch (Window)"},{"location":"api/5.0.4/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/5.0.4/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The tumbling time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeBatch (Window)"},{"location":"api/5.0.4/#timelengthbatch-window","text":"This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT window.length) unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold the events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeLengthBatch (Window)"},{"location":"api/latest/","text":"API Docs - v5.0.4 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Unique deduplicate (Stream Processor) Removes duplicate events based on the unique.key parameter that arrive within the time.interval gap from one another. Syntax unique:deduplicate( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG time.interval) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key Parameter to uniquely identify events. INT LONG FLOAT BOOL DOUBLE STRING No Yes time.interval The sliding time period within which the duplicate events are dropped. INT LONG No No Examples EXAMPLE 1 define stream TemperatureStream (sensorId string, temperature double) from TemperatureStream#unique:deduplicate(sensorId, 30 sec) select * insert into UniqueTemperatureStream; Query that removes duplicate events of TemperatureStream stream based on sensorId attribute when they arrive within 30 seconds. ever (Window) Window that retains the latest events based on a given unique keys. When a new event arrives with the same key it replaces the one that exist in the window. b This function is not recommended to be used when the maximum number of unique attributes are undefined, as there is a risk of system going out to memory /b . Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute used to checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string); from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount insert events into UniqueIps; Query collects all unique events based on the ip attribute by retaining the latest unique events from the LoginEvents stream. Then the query counts the unique ip s arrived so far and outputs the ipCount via the UniqueIps stream. EXAMPLE 2 define stream DriverChangeStream (trainID string, driver string); from DriverChangeStream#window.unique:ever(trainID) select trainID, driver insert expired events into PreviousDriverChangeStream; Query collects all unique events based on the trainID attribute by retaining the latest unique events from the DriverChangeStream stream. The query outputs the previous unique event stored in the window as the expired events are emitted via PreviousDriverChangeStream stream. EXAMPLE 3 define stream StockStream (symbol string, price float); define stream PriceRequestStream(symbol string); from StockStream#window.unique:ever(symbol) as s join PriceRequestStream as p on s.symbol == p.symbol select s.symbol as symbol, s.price as price insert events into PriceResponseStream; Query stores the last unique event for each symbol attribute of StockStream stream, and joins them with events arriving on the PriceRequestStream for equal symbol attributes to fetch the latest price for each requested symbol and output via PriceResponseStream stream. externalTimeBatch (Window) This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string); from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch. first (Window) This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute. firstLengthBatch (Window) This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute. firstTimeBatch (Window) A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'. length (Window) This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events that should be included in a sliding length window. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window. lengthBatch (Window) This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream. time (Window) This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires. timeBatch (Window) This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The tumbling time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute. timeLengthBatch (Window) This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT window.length) unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold the events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"latest"},{"location":"api/latest/#api-docs-v504","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.4"},{"location":"api/latest/#unique","text":"","title":"Unique"},{"location":"api/latest/#deduplicate-stream-processor","text":"Removes duplicate events based on the unique.key parameter that arrive within the time.interval gap from one another. Syntax unique:deduplicate( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG time.interval) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key Parameter to uniquely identify events. INT LONG FLOAT BOOL DOUBLE STRING No Yes time.interval The sliding time period within which the duplicate events are dropped. INT LONG No No Examples EXAMPLE 1 define stream TemperatureStream (sensorId string, temperature double) from TemperatureStream#unique:deduplicate(sensorId, 30 sec) select * insert into UniqueTemperatureStream; Query that removes duplicate events of TemperatureStream stream based on sensorId attribute when they arrive within 30 seconds.","title":"deduplicate (Stream Processor)"},{"location":"api/latest/#ever-window","text":"Window that retains the latest events based on a given unique keys. When a new event arrives with the same key it replaces the one that exist in the window. b This function is not recommended to be used when the maximum number of unique attributes are undefined, as there is a risk of system going out to memory /b . Syntax unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:ever( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute used to checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string); from LoginEvents#window.unique:ever(ip) select count(ip) as ipCount insert events into UniqueIps; Query collects all unique events based on the ip attribute by retaining the latest unique events from the LoginEvents stream. Then the query counts the unique ip s arrived so far and outputs the ipCount via the UniqueIps stream. EXAMPLE 2 define stream DriverChangeStream (trainID string, driver string); from DriverChangeStream#window.unique:ever(trainID) select trainID, driver insert expired events into PreviousDriverChangeStream; Query collects all unique events based on the trainID attribute by retaining the latest unique events from the DriverChangeStream stream. The query outputs the previous unique event stored in the window as the expired events are emitted via PreviousDriverChangeStream stream. EXAMPLE 3 define stream StockStream (symbol string, price float); define stream PriceRequestStream(symbol string); from StockStream#window.unique:ever(symbol) as s join PriceRequestStream as p on s.symbol == p.symbol select s.symbol as symbol, s.price as price insert events into PriceResponseStream; Query stores the last unique event for each symbol attribute of StockStream stream, and joins them with events arriving on the PriceRequestStream for equal symbol attributes to fetch the latest price for each requested symbol and output via PriceResponseStream stream.","title":"ever (Window)"},{"location":"api/latest/#externaltimebatch-window","text":"This is a batch (tumbling) time window that is determined based on an external time, i.e., time stamps that are specified via an attribute in the events. It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the new event. Syntax unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out) unique:externalTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, LONG time.stamp, INT|LONG window.time, INT start.time, INT|LONG time.out, INT|LONG replace.time.stamp.with.batch.end.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes time.stamp The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing. LONG No No window.time The sliding time period for which the window should hold events. INT LONG No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT Yes No time.out Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch. The system waits till an event from the next batch arrives to flush the current batch INT LONG Yes No replace.time.stamp.with.batch.end.time Replaces the 'timestamp' value with the corresponding batch end time stamp. false INT LONG Yes No Examples EXAMPLE 1 define stream LoginEvents (timestamp long, ip string); from LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) select timestamp, ip, count() as total insert into UniqueIps ; In this query, the window holds the latest unique events that arrive from the 'LoginEvent' stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window have unique values for the 'ip' and monotonically increasing values for 'timestamp' attributes. The events in the window are inserted into the 'UniqueIps' output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.","title":"externalTimeBatch (Window)"},{"location":"api/latest/#first-window","text":"This is a window that holds only the first set of unique events according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window. Syntax unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key) unique:first( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG|FLOAT|BOOL|DOUBLE|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas. INT LONG FLOAT BOOL DOUBLE STRING No Yes Examples EXAMPLE 1 define stream LoginEvents (timeStamp long, ip string); from LoginEvents#window.unique:first(ip) insert into UniqueIps ; This returns the first set of unique items that arrive from the 'LoginEvents' stream, and returns them to the 'UniqueIps' stream. The unique events are only those with a unique value for the 'ip' attribute.","title":"first (Window)"},{"location":"api/latest/#firstlengthbatch-window","text":"This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window. Syntax unique:firstLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10) select symbol, price, volume insert all events into OutputStream ; The window in this configuration holds the first unique events from the 'CseEventStream' stream every second, and outputs them all into the the 'OutputStream' stream. All the events in a window during a given second should have a unique value for the 'symbol' attribute.","title":"firstLengthBatch (Window)"},{"location":"api/latest/#firsttimebatch-window","text":"A batch-time or tumbling window that holds the unique events according to the unique key parameters that have arrived within the time period of that window and gets updated for each such time window. When a new event arrives with a key which is already in the window, that event is not processed by the window. Syntax unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:firstTimeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of the first event. INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:firstTimeBatch(symbol,1 sec) select symbol, price, volume insert all events into OutputStream ; This holds the first unique events that arrive from the 'cseEventStream' input stream during each second, based on the symbol,as a batch, and returns all the events to the 'OutputStream'.","title":"firstTimeBatch (Window)"},{"location":"api/latest/#length-window","text":"This is a sliding length window that holds the events of the latest window length with the unique key and gets updated for the expiry and arrival of each event. When a new event arrives with the key that is already there in the window, then the previous event expires and new event is kept within the window. Syntax unique:length( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events that should be included in a sliding length window. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:length(symbol,10) select symbol, price, volume insert all events into OutputStream; In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. If the 'CseEventStream' receives an event for which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the 'OutputStream' event stream once an event expires or is added to the window.","title":"length (Window)"},{"location":"api/latest/#lengthbatch-window","text":"This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length, i.e., for the last set of events of the specified number in a tumbling manner. When a new event arrives within the window length having the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:lengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10) select symbol, price, volume insert expired events into OutputStream ; In this query, the window at any give time holds the last 10 unique events from the 'CseEventStream' stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the 'OutputStream' stream.","title":"lengthBatch (Window)"},{"location":"api/latest/#time-window","text":"This is a sliding time window that holds the latest unique events that arrived during the previous time window. The unique events are determined based on the value for a specified unique key parameter. The window is updated with the arrival and expiry of each event. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the new event. Syntax unique:time( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No No window.time The sliding time period for which the window should hold events. INT LONG No No Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:time(symbol, 1 sec) select symbol, price, volume insert expired events into OutputStream ; In this query, the window holds the latest unique events that arrived within the last second from the 'CseEventStream', and returns the expired events to the 'OutputStream' stream. During any given second, each event in the window should have a unique value for the 'symbol' attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.","title":"time (Window)"},{"location":"api/latest/#timebatch-window","text":"This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the time period of a windowhas a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the latest event. Syntax unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time) unique:timeBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The tumbling time period for which the window should hold events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeBatch(symbol, 1 sec) select symbol, price, volume insert all events into OutputStream ; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeBatch (Window)"},{"location":"api/latest/#timelengthbatch-window","text":"This is a batch or tumbling time length window that is updated with the latest events based on a unique key parameter. The window tumbles upon the elapse of the time window, or when a number of unique events have arrived. If a new event that arrives within the period of the window has a value for the key parameter which matches the value of an existing event, the existing event expires and it is replaced by the new event. Syntax unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT window.length) unique:timeLengthBatch( INT|LONG|FLOAT|BOOL|DOUBLE|STRING unique.key, INT|LONG window.time, INT|LONG start.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic unique.key The attribute that should be checked for uniqueness. INT LONG FLOAT BOOL DOUBLE STRING No Yes window.time The sliding time period for which the window should hold the events. INT LONG No Yes start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes Yes window.length The number of events the window should tumble. INT No Yes Examples EXAMPLE 1 define stream CseEventStream (symbol string, price float, volume int) from CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20) select symbol, price, volume insert all events into OutputStream; This window holds the latest unique events that arrive from the 'CseEventStream' at a given time, and returns all the events to the 'OutputStream' stream. It is updated every second based on the latest values for the 'symbol' attribute.","title":"timeLengthBatch (Window)"}]}